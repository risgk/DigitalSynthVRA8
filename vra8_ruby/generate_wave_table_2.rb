require './common'

N = 256.0

$pulse_25 = [
   +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,
   +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,
   +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,
   +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
]

$pulse_12 = [
   +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,
   +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,  +80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
]

$pseudo_tri = [
    +0,   +0,   +0,   +0,   +0,   +0,   +0,   +0,  +10,  +10,  +10,  +10,  +10,  +10,  +10,  +10,
   +20,  +20,  +20,  +20,  +20,  +20,  +20,  +20,  +30,  +30,  +30,  +30,  +30,  +30,  +30,  +30,
   +40,  +40,  +40,  +40,  +40,  +40,  +40,  +40,  +50,  +50,  +50,  +50,  +50,  +50,  +50,  +50,
   +60,  +60,  +60,  +60,  +60,  +60,  +60,  +60,  +70,  +70,  +70,  +70,  +70,  +70,  +70,  +70,
   +70,  +70,  +70,  +70,  +70,  +70,  +70,  +70,  +60,  +60,  +60,  +60,  +60,  +60,  +60,  +60,
   +50,  +50,  +50,  +50,  +50,  +50,  +50,  +50,  +40,  +40,  +40,  +40,  +40,  +40,  +40,  +40,
   +30,  +30,  +30,  +30,  +30,  +30,  +30,  +30,  +20,  +20,  +20,  +20,  +20,  +20,  +20,  +20,
   +10,  +10,  +10,  +10,  +10,  +10,  +10,  +10,   +0,   +0,   +0,   +0,   +0,   +0,   +0,   +0,
   -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
   -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
   -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
   -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
   -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
   -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
   -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
   -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
]

# refs http://d.hatena.ne.jp/ku-ma-me/20111124/p1#20111124f1
def fft(a)
  n = a.size
  return a if n == 1
  w = Complex.polar(1, -2 * Math::PI / n)
  a1 = fft((0 .. n / 2 - 1).map {|i| a[i] + a[i + n / 2] })
  a2 = fft((0 .. n / 2 - 1).map {|i| (a[i] - a[i + n / 2]) * (w ** i) })
  a1.zip(a2).flatten
end

def ifft(ffta)
  fft(ffta.map {|i| i.conj }).map {|i| i.conj }.map {|i| i / N }.map {|i| i.real.round }
end

def lpf(ffta, k)
  a = ffta.clone
  (k + 1 .. (N / 2) - 1).each do |i|
    a[i] = 0.0
    a[N - i] = 0.0
  end
  return a
end

$fft_pulse_25 = fft($pulse_25)
$fft_pulse_12 = fft($pulse_12)
$fft_pseudo_tri = fft($pseudo_tri)

$file = File::open("wave_table_2.rb", "w")

def generate_wave_table(max, name, ffta)
  $file.printf("$wave_table_%s_m%d = [\n  ", name, max)
  a = ifft(lpf(ffta, max))
  a.each_with_index do |level, t|
    $file.printf("%+4d,", level)
    if t == 255
      $file.printf("\n")
    elsif t % 16 == 15
      $file.printf("\n  ")
    else
      $file.printf(" ")
    end
  end
  $file.printf("]\n\n")
end

def generate_wave_table_pulse_25(max)
  generate_wave_table(max, "pulse_25", $fft_pulse_25)
end

def generate_wave_table_pulse_12(max)
  generate_wave_table(max, "pulse_12", $fft_pulse_12)
end

def generate_wave_table_pseudo_tri(max)
  generate_wave_table(max, "pseudo_tri", $fft_pseudo_tri)
end

FREQ_MAX = 8819  # refs "freq_table.rb"

def max_from_i(i)
  max = 128 / (i + 1)
  max = 64 if max == 128
  max = max - 1 if max % 2 == 1
  return max
end

def generate_wave_tables(name)
  wave_table_sels = (0..(FREQ_MAX / 256))
  $file.printf("$wave_tables_%s = [\n", name)
  wave_table_sels.each do |i|
    $file.printf("  $wave_table_%s_m%d,\n", name, max_from_i(i))
  end
  $file.printf("]\n\n")
end

overtones = (0..(FREQ_MAX / 256)).map { |i| max_from_i(i) }.uniq

overtones.each do |max|
  generate_wave_table_pulse_25(max)
end

overtones.each do |max|
  generate_wave_table_pulse_12(max)
end

overtones.each do |max|
  generate_wave_table_pseudo_tri(max)
end

generate_wave_tables("pulse_25")
generate_wave_tables("pulse_12")
generate_wave_tables("pseudo_tri")

$file.close
